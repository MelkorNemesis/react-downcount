// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Countdown /> render() can be passed custom renderer 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Countdown
    endDate={2018-12-24T00:00:00.000Z}
    useDays={true}
    useHours={true}
    useMinutes={true}
>
    [Function]
</Countdown>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": "1 päivää 0 tuntia 0 minuuttia 0 sekuntia",
      "className": undefined,
    },
    "ref": null,
    "rendered": "1 päivää 0 tuntia 0 minuuttia 0 sekuntia",
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": "1 päivää 0 tuntia 0 minuuttia 0 sekuntia",
        "className": undefined,
      },
      "ref": null,
      "rendered": "1 päivää 0 tuntia 0 minuuttia 0 sekuntia",
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`<Countdown /> render() renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Countdown
    endDate={2018-12-24T00:00:00.000Z}
    useDays={true}
    useHours={true}
    useMinutes={true}
>
    [Function]
</Countdown>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Unknown>
        1
         days 
        00
        :
        00
        :
        00
</Unknown>,
      "className": undefined,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          1,
          " days ",
          "00",
          ":",
          "00",
          ":",
          "00",
        ],
      },
      "ref": null,
      "rendered": Array [
        1,
        " days ",
        "00",
        ":",
        "00",
        ":",
        "00",
      ],
      "type": Symbol(react.fragment),
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Unknown>
          1
           days 
          00
          :
          00
          :
          00
</Unknown>,
        "className": undefined,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            1,
            " days ",
            "00",
            ":",
            "00",
            ":",
            "00",
          ],
        },
        "ref": null,
        "rendered": Array [
          1,
          " days ",
          "00",
          ":",
          "00",
          ":",
          "00",
        ],
        "type": Symbol(react.fragment),
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
